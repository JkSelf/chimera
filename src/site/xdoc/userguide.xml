<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor 
  license agreements. See the NOTICE file distributed with this work for additional 
  information regarding copyright ownership. The ASF licenses this file to 
  You under the Apache License, Version 2.0 (the "License"); you may not use 
  this file except in compliance with the License. You may obtain a copy of 
  the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
  by applicable law or agreed to in writing, software distributed under the 
  License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
  OF ANY KIND, either express or implied. See the License for the specific 
  language governing permissions and limitations under the License. -->
<document>
  <properties>
    <title>Commons Crypto - User guide</title>
    <author email="dev@commons.apache.org">Commons Documentation Team</author>
  </properties>
  <body>
    <!-- ================================================== -->
    <section name="User guide">
      <p>Apache Commons Crypto is a cryptographic library optimized with AES-NI
        (Advanced Encryption
        Standard New Instructions). It provides Java API for both cipher level and Java stream
        level. Developers can use it to implement high performance AES encryption/decryption with
        the minimum code and effort. Please note that Chimera doesn't implement the cryptographic
        algorithm such as AES directly. It wraps to Openssl or JCE which implement the algorithms.
      </p>
      <subsection name="Interfaces Overview">
        <p>Interfaces and classes used by the various implementation in the sub-packages.</p>
        <table>
          <tr>
            <td width="150">
              <a href="apidocs/index.html">cipher
              </a>
            </td>
            <td>
              The interface of cryptographic cipher for encryption and decryption.
            </td>
          </tr>

          <tr>
            <td width="150">
              <a href="apidocs/index.html">random
              </a>
            </td>
            <td>
              The interface for SecureRandom.
            </td>
          </tr>

          <tr>
            <td width="150">
              <a href="apidocs/index.html">stream
              </a>
            </td>
            <td>
              The interface wraps the underlying stream and it automatically encrypts the stream when data is written and decrypts the stream when data is read.
            </td>
          </tr>

        </table>
      </subsection>
      <subsection name ="Usage">
        <table>
          <tr>
            <td>
              <ol style="list-style-type: decimal">
              <h4>Usage of Random API</h4>
              byte[] data = new byte[16];<br/>
              Properties properties = new Properties();<br/>
              // Default value is com.intel.chimera.random.JavaSecureRandom<br/>
              properties.setProperty("chimera.crypto.secure.random.classes", "com.intel.chimera.random.OpensslSecureRandom,com.intel.chimera.random.OsSecureRandom");<br/>
              SecureRandomFactory.getSecureRandom(properties).nextBytes(data);<br/>
              <h4>Usage of Cipher API</h4>
              Properties properties = new Properties();<br/>
              // Default value is com.intel.chimera.crypto.JceCipher<br/>
              properties.setProperty("chimera.crypto.cipher.classes", "com.intel.chimera.crypto.OpensslCipher,com.intel.chimera.crypto.JceCipher");<br/>
              Cipher cipher = Utils.getCipherInstance(CipherTransformation.AES_CTR_NOPADDING, properties);<br/><br/>
              // Available key length is: 16, 24, 32 bytes<br/>
              byte[] key = new byte[16];<br/>
              // IV length is always 16 bytes<br/>
              byte[] iv = new byte[16];<br/>
              // 1 represents encryption ;0 represents decryption<br/>
              int mode = 1;<br/>
              cipher.init(mode, key, iv);<br/><br/>
              String input = "hello world!";<br/>
              int inputOffset = 0;<br/>
              int inputLen = input.length();<br/>
              byte[] output = new byte[1024];<br/>
              int outputOffset = 0;<br/>
              cipher.update(input.getBytes("UTF-8"), inputOffset, inputLen, output, outputOffset);<br/><br/>
              int bufferSize = 4096;<br/>
              ByteBuffer inBuffer = ByteBuffer.allocateDirect(bufferSize);<br/>
              ByteBuffer outBuffer = ByteBuffer.allocateDirect(bufferSize);<br/>
              inBuffer.put("The data you want to encrypt or decrypt".getBytes("UTF-8"));<br/>
              cipher.update(inBuffer, outBuffer);<br/>
              cipher.doFinal(inBuffer, outBuffer);<br/>
              <h4>Usage of Stream API</h4>
              byte[] key = new byte[16];<br/>
              byte[] iv = new byte[16];<br/>
              int bufferSize = 4096;<br/>
              String input = "hello world!";<br/>
              byte[] decryptedData = new byte[1024];<br/>
              // Encrypt<br/>
              ByteArrayOutputStream os = new ByteArrayOutputStream();<br/>
              CryptoOutputStream cos = new CryptoOutputStream(os, cipher, bufferSize, key, iv);<br/>
              cos.write(input.getBytes("UTF-8"));<br/>
              cos.flush();<br/>
              cos.close();<br/>
              // Decrypt<br/>
              CryptoInputStream cis = new CryptoInputStream(new ByteArrayInputStream(os.toByteArray()), cipher, bufferSize, key, iv);<br/>
              int decryptedLen = cis.read(decryptedData, 0, 1024);<br/>
              </ol>
            </td>
          </tr>
        </table>

      </subsection>

    </section>
    <!-- ================================================== -->
  </body>
</document>